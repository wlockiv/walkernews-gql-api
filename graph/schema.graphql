interface Post {
    id: ID!
}

enum PostType {
    Link
    Comment
}

type Link implements Post{
    id: ID!
    title: String!
    address: String!
    createdAt: Time
    user: User!
    comments: [Comment!]
}

type Comment implements Post {
    id: ID!
    content: String!
    parent: Post!
    user: User!
    comments: [Comment!]
}

type User {
    id: ID!
    email: String!
    handle: String!
}

type Query {
    links: [Link!]!
    link(id: ID!): Link!
    currentUser: User!
}

input NewLink {
    title: String!
    address: String!
    # userId: String! <- This is provided by jwt now
}

input RefreshToken {
    token: String!
}

input NewUser {
    handle: String!
    email: String!
    password: String!
}

input Login {
    email: String!
    password: String!
}

input NewComment {
    content: String!
    parentId: ID
    parentType: PostType!
    # user: ID! <- To be handled by jwt
}

type Mutation {
    # LINK
    createLink(input: NewLink!): Link!
    deleteLink(id: String!): Link!

    # USER
    createUser(input: NewUser!): User!
    login(input: Login!): String!

    # COMMENT
    createComment(input: NewComment!): Comment!
}

scalar Time